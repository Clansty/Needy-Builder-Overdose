# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

{ lib, stdenv, nodejs, git, cacert, fetchurl, writeShellScript, writeShellScriptBin }:
{ src, overrideAttrs ? null, ... } @ args:

let

  cacheFolder = ".yarn/cache";

  # Call overrideAttrs on a derivation if a function is provided.
  optionalOverride = fn: drv:
    if fn == null then drv else drv.overrideAttrs fn;

  # Simple stub that provides the global yarn command.
  yarn = writeShellScriptBin "yarn" ''
    exec '${nodejs}/bin/node' '${./.yarn/releases/yarn-3.2.0.cjs}' "$@"
  '';

  # Common attributes between Yarn derivations.
  drvCommon = {
    # Make sure the build uses the right Node.js version everywhere.
    buildInputs = [ nodejs yarn ];
    # Tell node-gyp to use the provided Node.js headers for native code builds.
    npm_config_nodedir = nodejs;
  };

  # Comman variables that we set in a Nix build, but not in a Nix shell.
  buildVars = ''
    # Make Yarn produce friendlier logging for automated builds.
    export CI=1
    # Tell node-pre-gyp to never fetch binaries / always build from source.
    export npm_config_build_from_source=true
    # Disable Nixify plugin to save on some unnecessary processing.
    export yarn_enable_nixify=false
  '';

  # Create derivations for fetching dependencies.
  cacheDrvs = let
    builder = writeShellScript "yarn-cache-builder" ''
      source $stdenv/setup
      cd "$src"
      ${buildVars}
      HOME="$TMP" yarn_cache_folder="$TMP" \
        yarn nixify fetch-one $locator
      # Because we change the cache dir, Yarn may generate a different name.
      mv "$TMP/$(sed 's/-[^-]*\.[^-]*$//' <<< "$outputFilename")"-* $out
    '';
  in lib.mapAttrs (locator: { filename, sha512 }: stdenv.mkDerivation {
    inherit src builder locator;
    name = lib.strings.sanitizeDerivationName locator;
    buildInputs = [ yarn git cacert ];
    outputFilename = filename;
    outputHashMode = "flat";
    outputHashAlgo = "sha512";
    outputHash = sha512;
  }) cacheEntries;

  # Create a shell snippet to copy dependencies from a list of derivations.
  mkCacheBuilderForDrvs = drvs:
    writeShellScript "collect-yarn-cache" (lib.concatMapStrings (drv: ''
      cp ${drv} '${drv.outputFilename}'
    '') drvs);


  # Main project derivation.
  project = stdenv.mkDerivation (drvCommon // {
    inherit src;
    name = "source-manager";

    configurePhase = ''
      ${buildVars}

      # Copy over the Yarn cache.
      rm -fr '${cacheFolder}'
      mkdir -p '${cacheFolder}'
      pushd '${cacheFolder}' > /dev/null
      source ${mkCacheBuilderForDrvs (lib.attrValues cacheDrvs)}
      popd > /dev/null

      # Yarn may need a writable home directory.
      export yarn_global_folder="$TMP"

      # Some node-gyp calls may call out to npm, which could fail due to an
      # read-only home dir.
      export HOME="$TMP"

      # running preConfigure after the cache is populated allows for
      # preConfigure to contain substituteInPlace for dependencies as well as the
      # main project. This is necessary for native bindings that maybe have
      # hardcoded values.
      runHook preConfigure



      # Run normal Yarn install to complete dependency installation.
      yarn install --immutable --immutable-cache

      runHook postConfigure
    '';

    buildPhase = ''
      runHook preBuild
      runHook postBuild
    '';

    installPhase = ''
      runHook preInstall

      mkdir -p "$out/libexec/$name" "$out/bin"

      # Move the package contents to the output directory.
      # - If the package.json has a `files` field, only files matching those patterns are copied
      # - Otherwise all files are copied
      yarn pack --out package.tgz
      tar xzvf package.tgz --directory "$out/libexec/$name" --strip-components=1

      cp .yarnrc* 'yarn.lock' "$out/libexec/$name"
      cp --recursive .yarn "$out/libexec/$name"

      # If the project uses the node-modules linker, then
      # include the node_modules folder in the package.
      if [ -d node_modules ]; then
        cp --recursive node_modules "$out/libexec/$name"
      else
        # Otherwise, assume PnP. Copy the loader into the package.
        cp .pnp.* "$out/libexec/$name"
      fi

      cd "$out/libexec/$name"

      # Invoke a plugin internal command to setup binaries.
      yarn nixify install-bin $out/bin

      # A package with node_modules doesn't need the cache
      if [ -d node_modules ]; then
        yarn cache clean
      fi

      runHook postInstall
    '';

    passthru = {
      inherit nodejs;
      yarn-freestanding = yarn;
      yarn = writeShellScriptBin "yarn" ''
        exec '${yarn}/bin/yarn' --cwd '${project}/libexec/${project.name}' "$@"
      '';
    };
  });

cacheEntries = {
"@cspotcode/source-map-consumer@npm:0.8.0" = { filename = "@cspotcode-source-map-consumer-npm-0.8.0-1f37e9e72b-c0c16ca3d2.zip"; sha512 = "c0c16ca3d2f58898f1bd74c4f41a189dbcc202e642e60e489cbcc2e52419c4e89bdead02c886a12fb13ea37798ede9e562b2321df997ebc210ae9bd881561b4e"; };
"@cspotcode/source-map-support@npm:0.7.0" = { filename = "@cspotcode-source-map-support-npm-0.7.0-456c3ea2ce-9faddda775.zip"; sha512 = "9faddda7757cd778b5fd6812137b2cc265810043680d6399acc20441668fafcdc874053be9dccd0d9110087287bfad27eb3bf342f72bceca9aa9059f5d0c4be8"; };
"@tsconfig/node10@npm:1.0.8" = { filename = "@tsconfig-node10-npm-1.0.8-90a8cce25d-b8d5fffbc6.zip"; sha512 = "b8d5fffbc6b17ef64ef74f7fdbccee02a809a063ade785c3648dae59406bc207f70ea2c4296f92749b33019fa36a5ae716e42e49cc7f1bbf0fd147be0d6b970a"; };
"@tsconfig/node12@npm:1.0.9" = { filename = "@tsconfig-node12-npm-1.0.9-780563856d-a01b2400ab.zip"; sha512 = "a01b2400ab3582b86b589c6d31dcd0c0656f333adecde85d6d7d4086adb059808b82692380bb169546d189bf771ae21d02544a75b57bd6da4a5dd95f8567bec9"; };
"@tsconfig/node14@npm:1.0.1" = { filename = "@tsconfig-node14-npm-1.0.1-3ecac58e68-976345e896.zip"; sha512 = "976345e896c0f059867f94f8d0f6ddb8b1844fb62bf36b727de8a9a68f024857e5db97ed51d3325e23e0616a5e48c034ff51a8d595b3fe7e955f3587540489be"; };
"@tsconfig/node16@npm:1.0.2" = { filename = "@tsconfig-node16-npm-1.0.2-1f43ab567a-ca94d36397.zip"; sha512 = "ca94d3639714672bbfd55f03521d3f56bb6a25479bd425da81faf21f13e1e9d15f40f97377dedbbf477a5841c5b0c8f4cd1b391f33553d750b9202c54c2c07aa"; };
"@types/node@npm:17.0.31" = { filename = "@types-node-npm-17.0.31-d8d26aa013-704618350f.zip"; sha512 = "704618350f8420d5c47db0f7778398e821b7724369946f5c441a7e6b9343295553936400eb8309f0b07d5e39c240988ab3456b983712ca86265dabc9aee4ad3d"; };
"acorn-walk@npm:8.2.0" = { filename = "acorn-walk-npm-8.2.0-2f2cac3177-1715e76c01.zip"; sha512 = "1715e76c01dd7b2d4ca472f9c58968516a4899378a63ad5b6c2d668bba8da21a71976c14ec5f5b75f887b6317c4ae0b897ab141c831d741dc76024d8745f1ad1"; };
"acorn@npm:8.7.1" = { filename = "acorn-npm-8.7.1-7c7a019990-aca0aabf98.zip"; sha512 = "aca0aabf98826717920ac2583fdcad0a6fbe4e583fdb6e843af2594e907455aeafe30b1e14f1757cd83ce1776773cf8296ffc3a4acf13f0bd3dfebcf1db6ae80"; };
"arg@npm:4.1.3" = { filename = "arg-npm-4.1.3-1748b966a8-544af8dd3f.zip"; sha512 = "544af8dd3f60546d3e4aff084d451b96961d2267d668670199692f8d054f0415d86fc5497d0e641e91546f0aa920e7c29e5250e99fc89f5552a34b5d93b77f43"; };
"create-require@npm:1.1.1" = { filename = "create-require-npm-1.1.1-839884ca2e-a9a1503d43.zip"; sha512 = "a9a1503d4390d8b59ad86f4607de7870b39cad43d929813599a23714831e81c520bddf61bcdd1f8e30f05fd3a2b71ae8538e946eb2786dc65c2bbc520f692eff"; };
"date-format@npm:4.0.14" = { filename = "date-format-npm-4.0.14-50da5e5139-dfe5139df6.zip"; sha512 = "dfe5139df6af5759b9dd3c007b899b3f60d45a9240ffeee6314ab74e6ab52e9b519a44ccf285888bdd6b626c66ee9b4c8a523075fa1140617b5beb1cbb9b18d1"; };
"debug@npm:4.3.4" = { filename = "debug-npm-4.3.4-4513954577-3dbad3f94e.zip"; sha512 = "3dbad3f94ea64f34431a9cbf0bafb61853eda57bff2880036153438f50fb5a84f27683ba0d8e5426bf41a8c6ff03879488120cf5b3a761e77953169c0600a708"; };
"diff@npm:4.0.2" = { filename = "diff-npm-4.0.2-73133c7102-f2c09b0ce4.zip"; sha512 = "f2c09b0ce4e6b301c221addd83bf3f454c0bc00caa3dd837cf6c127d6edf7223aa2bbe3b688feea110b7f262adbfc845b757c44c8a9f8c0c5b15d8fa9ce9d20d"; };
"flatted@npm:3.2.7" = { filename = "flatted-npm-3.2.7-0da10b7c56-427633049d.zip"; sha512 = "427633049d55bdb80201c68f7eb1cbd533e03eac541f97d3aecab8c5526f12a20ccecaeede08b57503e772c769e7f8680b37e8d482d1e5f8d7e2194687f9ea35"; };
"fs-extra@npm:8.1.0" = { filename = "fs-extra-npm-8.1.0-197473387f-bf44f0e6ce.zip"; sha512 = "bf44f0e6cea59d5ce071bba4c43ca76d216f89e402dc6285c128abc0902e9b8525135aa808adad72c9d5d218e9f4bcc63962815529ff2f684ad532172a284880"; };
"graceful-fs@npm:4.2.10" = { filename = "graceful-fs-npm-4.2.10-79c70989ca-3f109d70ae.zip"; sha512 = "3f109d70ae123951905d85032ebeae3c2a5a7a997430df00ea30df0e3a6c60cf6689b109654d6fdacd28810a053348c4d14642da1d075049e6be1ba5216218da"; };
"jsonfile@npm:4.0.0" = { filename = "jsonfile-npm-4.0.0-10ce3aea15-6447d6224f.zip"; sha512 = "6447d6224f0d31623eef9b51185af03ac328a7553efcee30fa423d98a9e276ca08db87d71e17f2310b0263fd3ffa6c2a90a6308367f661dc21580f9469897c9e"; };
"log4js@npm:6.7.0" = { filename = "log4js-npm-6.7.0-79f023c488-f6321c5ccd.zip"; sha512 = "f6321c5ccd343282ee1087a7a46dd6b00bd7104d80cd82b5c62b8cfc912de5e83cacd2abcbf834e4f47bbebede5dbd12eae08670e85bc42d14f6b22447d080eb"; };
"make-error@npm:1.3.6" = { filename = "make-error-npm-1.3.6-ccb85d9458-b86e5e0e25.zip"; sha512 = "b86e5e0e25f7f777b77fabd8e2cbf15737972869d852a22b7e73c17623928fccb826d8e46b9951501d3f20e51ad74ba8c59ed584f610526a48f8ccf88aaec402"; };
"ms@npm:2.1.2" = { filename = "ms-npm-2.1.2-ec0c1512ff-673cdb2c31.zip"; sha512 = "673cdb2c3133eb050c745908d8ce632ed2c02d85640e2edb3ace856a2266a813b30c613569bf3354fdf4ea7d1a1494add3bfa95e2713baa27d0c2c71fc44f58f"; };
"rfdc@npm:1.3.0" = { filename = "rfdc-npm-1.3.0-272f288ad8-fb2ba8512e.zip"; sha512 = "fb2ba8512e43519983b4c61bd3fa77c0f410eff6bae68b08614437bc3f35f91362215f7b4a73cbda6f67330b5746ce07db5dd9850ad3edc91271ad6deea0df32"; };
"streamroller@npm:3.1.3" = { filename = "streamroller-npm-3.1.3-ba7123ae0e-47a6699740.zip"; sha512 = "47a6699740afe7ec88af92b24595b5b09c9866fedda92e3ed9e28d9267e3ebf23792ed00016d819764a3a0a2f1cd504c6cb7a4ff1ffad616b197b09f68a9bcf9"; };
"ts-node@npm:10.7.0" = { filename = "ts-node-npm-10.7.0-ef39b1d45e-2a379e43f7.zip"; sha512 = "2a379e43f7478d0b79e1e63af91fe222d83857727957df4bd3bdf3c0a884de5097b12feb9bbf530074526b8874c0338b0e6328cf334f3a5e2c49c71e837273f7"; };
"tsc@npm:2.0.4" = { filename = "tsc-npm-2.0.4-e331b066cb-50b1024088.zip"; sha512 = "50b10240887424c66454687f0fca4e319713b35cb44f0dab228719eb4dd757251f83c3d79e60d29dfbe90c2d6f1272f793b83e75a9fca2c622b4213ad3eb8cb1"; };
"typescript@npm:4.6.4" = { filename = "typescript-npm-4.6.4-114dfa5f7e-e7bfcc39cd.zip"; sha512 = "e7bfcc39cd4571a63a54e5ea21f16b8445268b9900bf55aee0e02ad981be576acc140eba24f1af5e3c1457767c96cea6d12861768fb386cf3ffb34013718631a"; };
"typescript@patch:typescript@npm%3A4.6.4#~builtin<compat/typescript>::version=4.6.4&hash=bda367" = { filename = "typescript-patch-044c37f428-1cb434fbc6.zip"; sha512 = "1cb434fbc637d347be90e3a0c6cd05e33c38f941713c8786d3031faf1842c2c148ba91d2fac01e7276b0ae3249b8633f1660e32686cc7a8c6a8fd5361dc52c66"; };
"universalify@npm:0.1.2" = { filename = "universalify-npm-0.1.2-9b22d31d2d-40cdc60f6e.zip"; sha512 = "40cdc60f6e61070fe658ca36016a8f4ec216b29bf04a55dce14e3710cc84c7448538ef4dad3728d0bfe29975ccd7bfb5f414c45e7b78883567fb31b246f02dff"; };
"v8-compile-cache-lib@npm:3.0.1" = { filename = "v8-compile-cache-lib-npm-3.0.1-4886071ece-78089ad549.zip"; sha512 = "78089ad549e21bcdbfca10c08850022b22024cdcc2da9b168bcf5a73a6ed7bf01a9cebb9eac28e03cd23a684d81e0502797e88f3ccd27a32aeab1cfc44c39da0"; };
"yaml@npm:2.1.3" = { filename = "yaml-npm-2.1.3-654a90032d-9131606232.zip"; sha512 = "91316062324a93f9cb547469092392e7d004ff8f70c40fecb420f042a4870b2181557350da56c92f07bd44b8f7a252b0be26e6ade1f548e1f4351bdd01c9d3c7"; };
"yn@npm:3.1.1" = { filename = "yn-npm-3.1.1-8ad4259784-2c487b0e14.zip"; sha512 = "2c487b0e149e746ef48cda9f8bad10fc83693cd69d7f9dcd8be4214e985de33a29c9e24f3c0d6bcf2288427040a8947406ab27f7af67ee9456e6b84854f02dd6"; };
};

in optionalOverride overrideAttrs project
